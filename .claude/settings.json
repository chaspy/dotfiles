{
  "env": {
    "TZ": "Asia/Tokyo",
    "MAX_THINKING_TOKENS": "31999",
    "DISABLE_AUTOUPDATER": "true",
    "CLAUDE_CODE_AUTO_CONNECT_IDE": "false",
    "CLAUDE_CODE_IDE_SKIP_AUTO_INSTALL": "true",
    "CLAUDE_CODE_IDE_SKIP_VALID_CHECK": "true",
    "CLAUDE_CODE_ENABLE_TELEMETRY": "false",
    "CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC": "true",
    "DISABLE_ERROR_REPORTING": "true",
    "DISABLE_TELEMETRY": "true",
    "DISABLE_MICROCOMPACT": "true"
  },
  "permissions": {
    "allow": [
      "Bash",
      "Read",
      "Edit",
      "Search",
      "WebSearch",
      "WebFetch",
      "mcp__serena__activate_project",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__create_text_file",
      "mcp__serena__delete_memory",
      "mcp__serena__execute_shell_command",
      "mcp__serena__find_file",
      "mcp__serena__find_referencing_symbols",
      "mcp__serena__find_symbol",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__insert_before_symbol",
      "mcp__serena__list_dir",
      "mcp__serena__list_memories",
      "mcp__serena__onboarding",
      "mcp__serena__prepare_for_new_conversation",
      "mcp__serena__read_file",
      "mcp__serena__read_memory",
      "mcp__serena__replace_regex",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__search_for_pattern",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__think_about_task_adherence",
      "mcp__serena__think_about_whether_you_are_done",
      "mcp__serena__write_memory",
      "mcp__serena__delete_lines",
      "mcp__serena__get_current_config",
      "mcp__serena__initial_instructions",
      "mcp__serena__insert_at_line",
      "mcp__serena__jet_brains_find_referencing_symbols",
      "mcp__serena__jet_brains_find_symbol",
      "mcp__serena__jet_brains_get_symbols_overview",
      "mcp__serena__remove_project",
      "mcp__serena__replace_lines",
      "mcp__serena__restart_language_server",
      "mcp__serena__summarize_changes",
      "mcp__serena__switch_modes"
    ],
    "deny": [
      "Bash(sudo :*)",
      "Bash(su :*)",
      "Bash(rm -rf /*)",
      "Bash(rm -rf ~/*)",
      "Bash(rm -rf .)",
      "Bash(rm -rf ..)",
      "Bash(rm -rf /)",
      "Bash(rm -rf ~)",
      "Bash(prisma migrate reset)",
      "Bash(dd :*)",
      "Bash(mkfs :*)",
      "Bash(fdisk :*)",
      "Bash(parted :*)",
      "Bash(chown :*)",
      "Bash(chmod 7?? /etc/*)",
      "Bash(shutdown :*)",
      "Bash(reboot :*)",
      "Bash(halt :*)",
      "Bash(poweroff :*)",
      "Bash(curl | bash)",
      "Bash(wget | bash)",
      "Bash(curl | sh)",
      "Bash(wget | sh)",
      "Bash(chmod 777 /*)",
      "Bash(chmod -R 777 :*)",
      "Bash(chown -R :*)",
      "Bash(> /dev/sda*)",
      "Bash(format :*)",
      "Bash(diskutil :*)",
      "Bash(kill -9 -1)",
      "Bash(mv /* /dev/null)",
      "Bash(find / -delete)",
      "Bash(find ~ -delete)",
      "Bash(systemctl stop :*)",
      "Bash(service :*)",
      "Bash(launchctl unload :*)",
      "Bash(npm install -g --unsafe-perm :*)",
      "Bash(pip install --break-system-packages :*)",
      "Bash(brew uninstall --force :*)",
      "Bash(apt-get remove --purge :*)",
      "Bash(yum remove -y :*)",
      "Bash(pacman -Rdd :*)"
    ],
    "defaultMode": "acceptEdits"
  },
  "model": "opus",
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "serena"
  ],
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'ファイル編集完了'"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'PostToolUse テスト実行'"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'コマンド実行前チェック'"
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "BR=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo '-'); MODEL=$(jq -r '.model // \"sonnet-4\"' ~/.claude/settings.json 2>/dev/null || echo 'opus'); printf '📁 %s 🌿 %s 🤖 %s 🔢%s' \"${PWD##*/}\" \"${BR}\" \"${MODEL}\" \"$TOKENS\""
  }
}